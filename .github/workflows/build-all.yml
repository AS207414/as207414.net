name: Build and push AS207414 UI Binaries & Docker Images

on:
  workflow_dispatch:
  push:

jobs:

  gitversion:
    name: Determine the intended website version
    runs-on: ubuntu-latest
    outputs:
      majorminorpatch: ${{ steps.gitversion.outputs.majorMinorPatch }}
      semver: ${{ steps.gitversion.outputs.semVer }}
      shortsha: ${{ steps.gitversion.outputs.shortSha }}
      branchname: ${{ steps.gitversion.outputs.branchName }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: '5.x'

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.7

  go-version:
    name: "Determine Go toolchain version"
    runs-on: ubuntu-latest
    outputs:
      go-version: ${{ steps.version.outputs.go-version }}
    steps:
      - uses: actions/checkout@v2
      - name: Determine Go version
        id: version
        run: |
          echo "Building with Go $(cat .go-version)"
          echo "::set-output name=go-version::$(cat .go-version)"

  build:
    name: Build for linux_amd64
    runs-on: ubuntu-latest
    env:
      SEMVER: ${{ needs.gitversion.outputs.semver }}
      SHORTSHA: ${{ needs.gitversion.outputs.shortsha }}
      MAJORMINORPATCH: ${{ needs.gitversion.outputs.majorminorpatch }}
      BRANCH: ${{ needs.gitversion.outputs.branchname }}
      GOVER: ${{ needs.go-version.outputs.go-version }}
      GOOS: linux
      GOARCH: amd64
    needs:
      - gitversion
      - go-version
    steps:
      - uses: actions/checkout@v2
      - name: Install Go toolchain
        uses: actions/setup-go@v2
        with:
          go-version: ${{ needs.go-version.outputs.go-version }}
      - name: Build binaries
        env:
          CGO_ENABLED: 0
          MAIN_VERSION: -X main.version=${{ env.MAJORMINORPATCH }}
          MAIN_OS_VER: -X main.os_ver=${{ env.GOOS }}
          MAIN_OS_ARC: -X main.os_arc=${{ env.GOARCH }}
          MAIN_GO_VER: -X main.go_ver=${{ env.GOVER }}
          MAIN_GIT_SHA: -X main.git_sha=${{ env.SHORTSHA }}
        run: |
          go build -a -installsuffix cgo \
            -ldflags "-w -s ${{ env.MAIN_VERSION }} ${{ env.MAIN_OS_VER }} ${{ env.MAIN_OS_ARC }} ${{ env.MAIN_GO_VER }} ${{ env.MAIN_GIT_SHA }}" \
            -o=bin/as207414_linux_amd64 \
            ./cmd/ui && \
          chmod +x bin/as207414_linux_amd64 && \
          cp bin/as207414_linux_amd64 build/docker/as207414_linux_amd64
      - name: Login to Dockerhub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Login to Github Packages
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ganawa
          password: ${{ secrets.GHP_TOKEN }}
      - name: Build and push non-main docker image
        if: contains(env.BRANCH, 'develop') || startsWith(env.BRANCH, 'release') || startsWith(env.BRANCH, 'hotfix') || startsWith(env.BRANCH, 'tags')
        run: |
          cd build/docker
          docker build . \
            -t ${{ secrets.DOCKER_HUB_USERNAME }}/as207414-ui:${{ env.SEMVER }} \
            -t ghcr.io/${{ github.repository_owner }}/as207414-ui:${{ env.SEMVER }}
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/as207414-ui:${{ env.SEMVER }}
          docker push ghcr.io/${{ github.repository_owner }}/as207414-ui:${{ env.SEMVER }}

      - name: Build and push main/latest docker image
        if: contains(env.BRANCH, 'main')
        run: |
          cd build/docker
          docker build . \
            -t ${{ secrets.DOCKER_HUB_USERNAME }}/as207414-ui:latest \
            -t ghcr.io/${{ github.repository_owner }}/as207414-ui:latest
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/as207414-ui:latest
          docker push ghcr.io/${{ github.repository_owner }}/as207414-ui:latest

      - name: Build and push non-tagged docker image
        if: "!startsWith(env.BRANCH, 'develop') && !startsWith(env.BRANCH, 'release') && !startsWith(env.BRANCH, 'hotfix') && !startsWith(env.branchName, 'main') && !startsWith(env.BRANCH, 'tags')"
        run: |
          cd build/docker
          docker build . \
            -t ${{ secrets.DOCKER_HUB_USERNAME }}/as207414-ui:${{ env.SHORTSHA }} \
            -t ghcr.io/${{ github.repository_owner }}/as207414-ui:${{ env.SHORTSHA }}
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/as207414-ui:${{ env.SHORTSHA }}
          docker push ghcr.io/${{ github.repository_owner }}/as207414-ui:${{ env.SHORTSHA }}
