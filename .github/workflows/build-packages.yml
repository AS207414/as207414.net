name: Build AS207414 website packages

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - develop
      - release/*
      - feature/*
    tags:
      - v*

jobs:

  metadata_raw-version:
    name: Determine the intended website version
    runs-on: ubuntu-latest
    outputs:
      raw-version: ${{ steps.get-website-version.outputs.product-version }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: git descibe
        id: git-describe
        run: |
          git describe --always
          echo "::set-output name=raw-version::$(git describe --always)"

  metadata_go-version:
    name: "Determine Go toolchain version"
    runs-on: ubuntu-latest
    outputs:
      go-version: ${{ steps.version.outputs.go-version }}
    steps:
      - uses: actions/checkout@v2
      - name: Determine Go version
        id: version
        run: |
          echo "Building with Go $(cat .go-version)"
          echo "::set-output name=go-version::$(cat .go-version)"

  build:
      name: Build for ${{ matrix.goos }}_${{ matrix.goarch }}
      runs-on: ubuntu-latest
      needs:
        - metadata_raw-version
        - metadata_go-version
      strategy:
        matrix:
          include:
            # - {goos: "freebsd", goarch: "386"}
            # - {goos: "freebsd", goarch: "amd64"}
            # - {goos: "freebsd", goarch: "arm"}
            - {goos: "linux", goarch: "386"}
            - {goos: "linux", goarch: "amd64"}
            - {goos: "linux", goarch: "arm"}
            - {goos: "linux", goarch: "arm64"}
            # - {goos: "openbsd", goarch: "386"}
            # - {goos: "openbsd", goarch: "amd64"}
            # - {goos: "solaris", goarch: "amd64"}
            # - {goos: "windows", goarch: "386"}
            - {goos: "windows", goarch: "amd64"}
        fail-fast: false

      steps:
        - uses: actions/checkout@v2

        - name: Install Go toolchain
          uses: actions/setup-go@v2
          with:
            go-version: ${{ needs.metadata_go-version.outputs.version }}

        - name: Build
          env:
            GOOS: ${{ matrix.goos }}
            GOARCH: ${{ matrix.goarch }}
          run: |
            mkdir dist out
            current_time = $(date --iso-8601=seconds)
            go build -ldflags "-w -s -X main.buildTime=$current_time -X main.version=${{ needs.metadata_raw-version.raw-version }}" -o=./dist/as207414_ui ./cmd/ui
            zip -r -j out/as207414_${{ needs.metadata_raw-version.raw-version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip dist/

        - uses: actions/upload-artifact@v2
          with:
            name: as207414_${{ needs.metadata_raw-version.raw-version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip
            path: out/as207414_${{ needs.metadata_raw-version.raw-version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip