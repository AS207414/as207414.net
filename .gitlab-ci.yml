image: docker

stages:
  - build
  - test
#  - deploy

before_script:
  - echo -n $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY

build:
  stage: build
  script:
    # fetches the latest image (not failing if image is not found)
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    # builds the project, passing proxy variables, and vcs vars for LABEL
    # notice the cache-from, which is going to use the image we just pulled locally
    # the built image is tagged locally with the commit SHA, and then pushed to
    # the GitLab registry
    - >
      docker build
      --pull
      --cache-from $CI_REGISTRY_IMAGE:latest
      --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
      .

    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA

test:
  stage: test
  only:
    # Only "master" should be tagged "latest"
    - develop
  script:
    # Because we have no guarantee that this job will be picked up by the same runner
    # that built the image in the previous step, we pull it again locally
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker run $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA python -m unittest discover -s tests
#  script:
#    # this configures Django application to use attached postgres database that is run on `postgres` host
#    - pip install -r app/requirements.txt
#    - python -m unittest discover -s tests

#staging:
#  stage: deploy
#  script:
#    - apt-get update -qy
#    - apt-get install -y ruby-dev
#    - gem install dpl
#    - dpl --provider=heroku --app=gitlab-ci-python-test-staging --api-key=$HEROKU_STAGING_API_KEY
#  only:
#    - master
#
#production:
#  stage: deploy
#  script:
#    - apt-get update -qy
#    - apt-get install -y ruby-dev
#    - gem install dpl
#    - dpl --provider=heroku --app=gitlab-ci-python-test-prod --api-key=$HEROKU_PRODUCTION_API_KEY
#  only:
#    - tags